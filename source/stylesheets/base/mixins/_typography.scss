// Number of breakpoints.
$breakpoints-limit: length($breakpoints);

// List of rootsizes, breakpoints, and max-widths.
$sizes: map-values($rootsizes);
$points: map-values($breakpoints);

// Root font-size in %, outputted in correct breakpoints.
@mixin rootsize {
  font-size: nth($sizes, 1) / 16 * 100%;

  // Loop through breakpoints.
  @for $i from 2 through $breakpoints-limit {
    @media screen and (min-width: nth($points, $i) / 16 * 1em ) {
      font-size: nth($sizes, $i) / 16 * 100%;
    }
  }
}

// Font-size in rems. Either set per breakpoint or for all.
// Use values as you would for pixels i.e. 16 or use values from the modular scale.
@mixin headersize($fontsize, $fontscale: 1) {
  font-size: rem($fontsize);
  line-height: rem($fontsize*1.1);
  margin-bottom: #{$fontsize/2}px;

  @for $i from 2 through $breakpoints-limit {
    @media screen and (min-width: nth($points, $i) / 16 * 1em ) {
      font-size: rem($fontsize * $fontscale);
      line-height: rem($fontsize * $fontscale * 1.1);
    }
  }
}

@mixin textdecoration($FontColor, $HoverColor, $BackgroundColor, $style) {
  color: $FontColor;
  text-decoration: none;
  background-position: 0 93%;
  background-repeat: repeat-x;
  background-size: 100% 0.15rem;
  @include transition(all 0 linear); // Reset any global transition effects on links

  @if $style == 'hover' {

    &:hover {
      color: $HoverColor;
      @include background-image(linear-gradient(top,rgba(0, 0, 0, 0) 50%,lighten($FontColor,20%) 50%));
      text-shadow: 0.1rem 0 $BackgroundColor,0.15rem 0 $BackgroundColor,-0.1rem 0 $BackgroundColor,-0.15rem 0 $BackgroundColor;
    }

  } @else if $style == 'underline' {

    color: $FontColor;
    @include background-image(linear-gradient(top,rgba(0, 0, 0, 0) 50%,lighten($FontColor,20%) 50%));
    text-shadow: 0.1rem 0 $BackgroundColor,0.15rem 0 $BackgroundColor,-0.1rem 0 $BackgroundColor,-0.15rem 0 $BackgroundColor;
    &:hover {
      color: $HoverColor;
      @include background-image(linear-gradient(top,rgba(0, 0, 0, 0) 50%,lighten(transparent,0%) 50%));
      text-shadow: 0 0 transparent;
    }

  } @else if $style == 'both' {

    @include background-image(linear-gradient(top,rgba(0, 0, 0, 0) 50%,lighten($FontColor,20%) 50%));
    text-shadow: 0.1rem 0 $BackgroundColor,0.15rem 0 $BackgroundColor,-0.1rem 0 $BackgroundColor,-0.15rem 0 $BackgroundColor;
    &:hover {
      color: $HoverColor;
      @include background-image(linear-gradient(top,rgba(0, 0, 0, 0) 50%,lighten($HoverColor,20%) 50%));
      text-shadow: 0.1rem 0 $BackgroundColor,0.15rem 0 $BackgroundColor,-0.1rem 0 $BackgroundColor,-0.15rem 0 $BackgroundColor;
    }

  } @else {

    &:hover {
      color: $HoverColor; //Standard hover color
    }

  }
} 