---
title: "Build APIs You Won't Hate"
---

.hero.section.section--primary
  = partial 'partials/book_intro', locals: { book: 'build-apis-you-wont-hate' }

%section.section.section--large#learnmore
  .container.container--large
    %h2.text-center What the book covers

    .topics.text-center
      .topics__topic
        %h4 Endpoints
        %p Naming things is hard, and working out how to structure your endpoints can be tough. Understand the benefits of plural v singular, collections, resources, sub-resources, sub-collections, etc.
      .topics__topic
        %h4 Input and Output
        %p Learn which data formats are nice to work with, and why form data is so entirely useless. Compare Facebook, Twitter and existing standards like <a href="http://jsonapi.org/">JSON-API</a>.
      .topics__topic
        %h4 File Uploads and Downloads
        %p APIs aren't just about JSON data, you can upload and download files of all sorts. Images, videos, CSV, etc.
      .topics__topic
        %h4 Documentation
        %p Public and Private APIs need good quality documentation, generated from simple specifications. Otherwise you're all just guessing at what the contracts are.
      .topics__topic
        %h4 Errors and Validation
        %p Look at what makes a good error message, making it understandable for humans and computers alike with the inclusion of codes, documentation links, and usage of standards.
      .topics__topic
        %h4 Authentication
        %p Shoud you use HTTP Basic, HTTP Digest, OAuth 1.0a or OAuth 2.0 to secure your API? The answer is probably OAuth 2.0, but find out a huge load of pros and cons on each of them.
      .topics__topic
        %h4 Debugging
        %p Working with APIs can be a little confusing at first, especially if you're trying to use the browser or Curl. This chapter outlines some powerful tools to make it easy as pie.
      .topics__topic
        %h4 Versioning
        %p What approach should you take to versioning your APIs, when to use which approach, and why they're all terrible.


.section.section--medium.section--secondary
  .container.container--large
    .statistics
      .statistics__item
        %h1= data.leanpub.reader_count
        %h4 Copies sold
      .statistics__item
        %h1 190
        %h4 Pages
      .statistics__item
        %h1 35,853
        %h4 Words


%section.section.section--large
  .container.container--medium
    %h2 About the book
    %p API development is increasingly common for server-side developers thanks to the rise of front-end JavaScript frameworks, iPhone applications, and API-centric architectures. It might seem like grabbing stuff from a data source and shoving it out as JSON would be easy, but surviving changes in business logic, database schema updates, new features, or deprecated endpoints can be a nightmare.

    %p After finding many of the existing resources for API development to be lacking, Phil learned a lot of things the hard way through years of trial and error. This book aims to condense that experience, taking examples and explanations further than the trivial apples and pears nonsense tutorials often provide.

    %p Phil worked primarily as an API developer for the last three years. One horror was managing an API built in FuelPHP by a freelancer at the million dollar startup he joined. It was utilizing a then deprecated ORM which had been hacked to death by the previous developer, so took the time to delete that mess and build the next version in Laravel, leveraging it's simple routing, database migrations, schema, seeding, etc. When the following major version of the API was built no rewrite was required, and both managed to live side-by-side on the same "API" servers.

    %p By passing on some best practices and general good advice you can hit the ground running with API development, combined with some horror stories and how they were overcome/avoided/averted. This book will discuss the theory of designing and building APIs in any language or framework, with this theory applied in PHP-based examples.

    %p Some of the more advanced topics covered here are endpoint testing, embedding data objects in a consistent and scalable manner, paginating responses (including embedded objects) and hypermedia "HATEOAS" controls.

%section.section.section--large.section--secondary
  .container
    %h2.text-center.padding-bottom--40 People who no longer hate their APIs

    %ul.reviews
      - data.quotes.each do |quote|
        %li.reviews__review
          .media
            .media__image
              = image_tag "quotes/#{quote.image}", width: '120px', height: '120px'
            .media__body
              %blockquote
                = quote.text.html_safe
                %cite
                  %a.name{ href: "https://twitter.com/#{quote.twitter}", title: "Follow #{quote.name} on Twitter" }="#{quote.name},"
                  %span.company=quote.company

-# .section.section--medium
-#   .container.container--large.text-center
-#     %h4 Just buy the damn book
-#     = partial 'partials/buy-options'
