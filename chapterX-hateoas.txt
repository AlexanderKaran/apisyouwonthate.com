# HATEOAS {#chapter-7}

software design on the scale of decades: every detail is intended to promote software longevity and independent evolution. Many of the constraints are directly opposed to short-term efficiency. Unfortunately, people are fairly good at short-term design, and usually awful at long-term design".[1]
^ Jump up to: a b c Fielding, Roy T. (20 Oct 2008). "REST APIs must be hypertext-driven". Retrieved 20 May 2010.
http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven



1. **“The Swamp of POX.”** You’re using HTTP to make RPC calls. HTTP is only really used as a tunnel.
1. **Resources.** Rather than making every call to a service endpoint, you have multiple endpoints that are used to represent resources, and you’re talking to them. This is the very beginnings of supporting REST.
1. **HTTP Verbs.** This is the level that something like Rails gives you out of the box: You interact with these Resources using HTTP verbs, rather than always using POST.
1. **Hypermedia Controls.** HATEOAS. You’re 100% REST compliant.

http://timelessrepo.com/haters-gonna-hateoas


great examples
http://spring.io/understanding/HATEOAS


maybe this
https://weblogs.java.net/blog/mkarg/archive/2010/02/14/what-hateoas-actually-means
seems shitty
