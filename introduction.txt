# Introduction

I've been building APIs for a long time now and it is becoming ever more common for server-side developer thanks to the rise of front-end JavaScript frameworks, iPhone applications and generally (Alex - remove "generally", it's unnecessary) API-centric architectures. On one hand you're just grabbing stuff from a data source and shoving it out as JSON, but surviving changes in business logic, database schema updates, new (Alex - instead of "new" perhaps "exposing new date") or deprecated etc (Alex - "or deprecating older endpoints") gets super difficult.

I found most resources out there to be horribly lacking or specifically aimed at one single framework. Many tutorials and books use apples and pears examples which are not concrete enough, or talk like listing /users and /users/1 are the only endpoints you'll ever need. I've spent the last year working at a company called Kapture where my primary function has been to inherit, rebuild, maintain and further develop a fairly large API (Alex - "...with many different endpoints exposing different data sets"). (Alex - the following paragraph needs fleshing out and could probably be it's own paragraph) This was v2 in one framework, v3 in another and is currently having v4 actively developed while needing any two versions to be supported at any one time.

By passing on some best practices, general good advice and (Alex - "recounting") some horror stories (Alex - "and how they were overcome/avoided/averted") you can hopefully avoid a lot of the pitfalls I fell into. This book will be speaking about generic theory (Alex - "This book will discuss the theory of  designing and building APIs in any language or framework") with concrete (Alex - replace "concrete" with "[with] this theory applied in") examples built in PHP. I'm going to try and avoid making it code-heavy to stop you falling asleep and to keep the non-PHP developers happy. 

This book will be updated with a new chapter every week or two, so don't worry about that abrupt ending.