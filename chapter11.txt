# Documentation {#chapter-11}

## Introduction

Regardless of whether you decide to keep an API private or release it to the
general public, documentation is incredibly important.

In the very early stages of development some API developers will rely soley on a Postman collection (discussed in [Chapter 8: Debugging](#chapter-8)) to be a sufficient source of documentation for their API. This may be the case but as soon as the API is in use by more people than just the one developer with their one collection this becauses a nightmare.

Even if the API is in use internally, without a single source of regularly updated documentation for your API you will be answering questions from anyone using the API about how that works non-stop.

If the API is public then... well without documentation nobody will use your API at all, which could drastically effect the successes of your company. Integration with services via an API these days is a very important factor for many companies, from startups to huge corporations, so do not go through the trouble of building something amazing only to have it completely ignored due to a lack of documentation.

## Types of Documentation

There should be a few different types of documentation:

### API Reference

The "API Reference" is sometimes refered to as "Endpoint Reference" and is essentially a list of all endpoints and their associated HTTP Methods, descriptions of what they and a list of all arguments that can be passed with descriptions about what values work and in what format those values could be. That is a lot of work. But, it can be made easier wit some tools. More on that later.

### Sample Code

"Sample Code" is generally just a case of building one or two libraries or code packages in different languages and documenting _their_ API with tools like [phpDocumentor](http://phpdoc.org/) and showing lots of common scenarios, like "Search venues by name" and "Create a checkin with a photograph" to show the basics of how that code works. These examples reduce the mental barrier for a developer because they can see concrete examples in a language familiar to them, instead of being forced to think in terms of HTTP requests.

Despite your own personal preferences, please for the love of every good in the world make your sample code look as good as you can in each language. Words cannot express how frustrating it is when some Ruby developer smashes out some _awful_ PHP code - because they are bad with PHP - and passes that off as a finished product.

Regardless of the language, most sample code should look very similar. This has the benefit of letting users switch between languages without having to start from scratch learning a new code package. PHP, Ruby and Python all have some concept of namespaces, they all have blocks or callbacks, they all have objects and hashes, they all support variadics and one day PHP will support named parameters. One day.

### Guides or Tutorials

This is the easiest of the lot. Take a subject like "Authentication" and talk through it like a blog post. Images, diagrams, code examples of the libraries handling various situations in one or multiple languages using tabs, etc. Some people show examples using command line curl, but that can get pretty nasty as curl is not exactly known for being an interface full of sugar.

A great example of a set of tutorials is the [SoundCloud API](http://developers.soundcloud.com/docs/api/guide). Their "Using the API" page is a central resource which links to the API Reference for those who want to get their hands dirty, but also contains simple scenarios like "Uploading Audio Files" in multiple languages.

![SoundCloud API Documentation - "Using the API"](images/chapter11/soundcloud-upload.png)

If you check the examples out here Ruby, Python and PHP all look near idential (although I am not sure what happened to JavaScript.)

Writing these guides takes a bit of time but that time will be given back in buckets, saving you answering the same questions over and over again. The other time saver is for when future you forgets how things work in 3 months, or you come back from a holiday rather frazzled and need a tutorial to step you through how things work. The amount of times I Google search a problem and find a blog I have written a few months ago answering it... It happens.

There are plenty of great tools around for static text-based documentation like this. Generally any Markdown -> HTML static
site generator works well; [Sculpin] (PHP), [Jekyll] (Ruby) and [Hyde] (Python) all do this as well as each other.

[Sculpin]: https://sculpin.io
[Jekyll]: https://github.com/jekyll/jekyll
[Hyde]: http://ringce.com/hyde

## Generating Endpoint Reference Documentation

There are no doubt multiple tools out there for generating your API/Endpoint documentation. Some recommend a system called [Swagger] which is a great looking tool and works with a _huge_ array of languages. Sadly to me it seems to be somewhat of a black art.

Swagger defines a specification and various language or framework specific implementations come up with their own solution. For PHP the way you go about this is through a rather confusing (and poorly documented) set of annotations with strange names. Furthermore it requres you to put these annotations throughout a large chunk of your application, including data mapper style models, which you might not even have. It wanted property-level annotations, and neither my models or Fractal transformers have properties, so this was a wild and whacky way to try and work.

Another tool called [API Blueprint] takes care of this nicely. A company called [Apiary] released this tool as open-source,
and as their entire company is about API generation it seems like rather a good fit.

[Swagger]: https://helloreverb.com/developers/swagger
[API Blueprint]: http://apiary.io/blueprint
[Apiary]: http://apiary.io

### Setting up API Blueprint and Aglio

API Blueprint has a very easy to understand set of [Getting Started instructions](http://apiblueprint.org/#get-started) which
has a series of approaches to creating your documentation with various languages and tool combinations. They are working on a
Ruby utility and .NET seems to be covered. Sublime Text has [a plugin][st-plugin], but by far the easiest is the command-line executable
called [Aglio].

There is one caviat: This tool uses NodeJS. That sounds like a blocker to some but it should not be. Only the command-line utility
requires NodeJS, much like some command-line tools require Ruby or Python. Install NodeJS and move along to the next bit.

**Step 1: Install NodeJS**

If you are using OSX then [Homebrew] makes this very easy:

  $ brew install node

Otherwise the [NodeJS] website has instructions for your operating system.


**Step 2: Install Aglio**

Install this utility as a command-line executable:

  $ npm install -g aglio

The `-g` switch installs the utility globally, instead of just into the current folder.


**Step 3: Generate Example Docs with Aglio**

The sample code for the book includes the Aglio example markdown file, which will help illustrate how easy it is to generate
documentation HTML:

  $ cd sample-code/chapter11/aglio-example
  $ aglio -i example.md -o index.html

**Step 4: Server HTML and Open in Browser**

Create some sort of web server (XAMPP, WAMP, MAMP, Pow, shove it on FTP or whatever) and view the contents. This book has used
PHP as an example before, so let us continue that trend:

  $ php -S localhost:8001

Now browse to that address in your favorite browser and you should see some very attractive sample output.

![Example output of Aglio generated HTML](images/chapter11/aglio-example.png)

Looks amazing right?

[Aglio]: https://github.com/danielgtaylor/aglio
[sg-plugin]: https://github.com/apiaryio/api-blueprint-sublime-plugin
[Homebrew]: http://brew.sh
[NodeJS]: http://nodejs.org


### Learning API Blueprint Syntax

To make the output reflext your API documentation, the Markdown source files will need updated.

While they are generally just Markdown, there is a specific format to this, known as "API Blueprint
format 1A". Their documentation says:

> In additional to regular [Markdown syntax] API Blueprint inherits some [GitHub
Flavored Markdown features] and uses some parts of [MultiMarkdown] syntax.

To try and cover as many documentable scenarios as possible, we will take some examples from
[Chapter 2: Planning and Creating Endpoints](#chapter-2) and document them in API Blueprint syntax.


> Places
> - Create
> - Read
> - Update
> - Delete
> - List (lat, lon, distance or box)
> - Image

> Users
> - Create
> - Read
> - Update
> - Delete
> - List (active, suspended)
> - Image
> - Favorites
> - Checkins
> - Followers





[Markdown syntax]: http://daringfireball.net/projects/markdown/syntax
[GitHub Flavored Markdown features]: https://help.github.com/articles/github-flavored-markdown
[MultiMarkdown]: http://fletcherpenney.net/multimarkdown
