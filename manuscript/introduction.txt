# Introduction

A lot of articles and tutorials talk about REST, with a varying level of accuracy. Some claim that
certain things are more RESTful than others whilst actually having very little to do with REST.
The word REST has been so utterly misused for the last seven or eight years that it actually means
nothing anymore, and a large chunk of the API development community has moved to terms like Hypermedia
API to represent what was intended by the original meaning of REST before it was utterly ruined. This book
will not get too hung up on these politics. It will mostly outline the pros and cons of various approaches,
only giving you the "one true way" when the other approaches are all patently awful (like SOAP and XML-RPC).

Whilst trying to learn about API development I found most resources out there to be horribly lacking or
specifically aimed at one single framework. Many tutorials and books use apples and pears examples which are
not concrete enough, or talk like listing `/users` and `/users/1` are the only endpoints you will ever need.
Between 2012 and 2014, I worked for a company called Kapture where my primary function has been to inherit,
rebuild, maintain and further develop a fairly large API with many different endpoints exposing a lot of
different use cases.

I worked primarily as an API developer for the last three years. One horror was managing an API built in
FuelPHP by a freelancer at the million dollar startup he joined. It was utilizing a then deprecated ORM,
which had been hacked to death by the previous developer. I took the time to delete that mess and build
the next version in Laravel, leveraging it's simple routing, database migrations, schema, seeding, etc.
When the following major version of the API was built no rewrite was required, and both managed to live
side-by-side on the same API servers.

This book will discuss the theory of designing and building APIs in any language or framework. This theory will
be applied in examples built mostly in PHP, with some Ruby and Python too. The book will not be too code-heavy
regardless, as reading code is no fun.

By the end of this book, you will have built an API that can create, read, update, delete things, handle searching,
and do everything else a good Hypermedia API needs to do.
